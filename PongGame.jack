// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: Pong/PongGame.jack

/**
 * Implements the Square Dance game.
 * In this game you can move a black square around the screen and
 * change its size during the movement.
 * In the beginning, the square is located at the top-left corner
 * of the screen. The arrow keys are used to move the square.
 * The 'z' & 'x' keys are used to decrement and increment the size.
 * The 'q' key is used to quit the game.
 */
class PongGame {

    // The square
    field Square square;

    // The players
    field Character player1, player2;

    // The square's movement direction
    field int squareDirection; // 0=none,1=up,2=down,3=left,4=right,5=up+left,6=down+right,7=up+right,8=down+left

    // Tha player's movement direction
    field int player1Direction, player2Direction; // 0=none,1=up,2=down

    /** Constructs a new Square Game. */
    constructor PongGame new() {
        let square = Square.new(250, 122);
        let player1 = Character.new(505, 103);
        let player2 = Character.new(0, 103);
        let squareDirection = 0;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do square.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Starts the game. Handles inputs from the user that control
     *  the square's movement,direction and size. */
    method void run() {
        var char key;
        var boolean exit;

        let exit = false;

        while (~exit) {
            // waits for a key to be pressed.
            while (key = 0) {
                let key = Keyboard.keyPressed();
                do moveSquare();
                do movePlayers();
            }

            if (key = 81) {
                let exit = true;
            }
            if (key = 131) {
                let player1Direction = 1;
            }
            if (key = 133) {
                let player1Direction = 2;
            }
            if ((key = 87) | (key = 119)) {
                let player2Direction = 1;
            }
            if ((key = 83) | (key = 115)) {
                let player2Direction = 2;
            }
            if (key = 130) {
                let squareDirection = 3;
            }
            if (key = 132) {
                let squareDirection = 4;
            }

            // waits for the key to be released.
            while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveSquare();
                do movePlayers();
            }
            let player1Direction = 0;
            let player2Direction = 0;
        }
            
        return;
	}

    /** Mover the players by 2 pixels in the current direction. */
    method void movePlayers(){
        if(player1Direction = 1){
            do player1.moveUp();
        }
        if(player1Direction = 2){
            do player1.moveDown();
        }
        if(player2Direction = 1){
            do player2.moveUp();
        }
        if(player2Direction = 2){
            do player2.moveDown();
        }
        return;
    }

    /** Moves the square by 2 pixels in the current direction. */
    method void moveSquare() {
        if (squareDirection = 1) {
            do square.moveUp();
        }
        if (squareDirection = 2) {
            do square.moveDown();
        }
        if (squareDirection = 3) {
            do square.moveLeft();
        }
        if (squareDirection = 4) {
            do square.moveRight();
        }
        if (squareDirection = 5) {
            do square.moveUp();
            do square.moveLeft();
        }
        if (squareDirection = 6) {
            do square.moveDown();
            do square.moveRight();
        }
        if (squareDirection = 7) {
            do square.moveUp();
            do square.moveRight();
        }
        if (squareDirection = 8) {
            do square.moveDown();
            do square.moveLeft();
        }

        if(sideLimits()){
            let squareDirection = 13 - squareDirection;
        }

        if(goalLimits()){
            let squareDirection = 7 - squareDirection;
            do square.reset();
            do Sys.wait(500);
        }

        do Sys.wait(5); // Delays the next movement.
        return;
    }

    method boolean sideLimits(){
        if((square.getY() < 1) | (square.getY() = 1) | ((square.getY()+10) > 254) | ((square.getY()+10) = 254)){
            return true;
        }
        return false;
    }

    /** Detect when the square touch the goals limits*/  
    method boolean goalLimits(){
        if((square.getX() < 1) | (square.getX() = 1) | ((square.getX()+10) > 510) | ((square.getX()+10) = 510)){
            return true;
        }
        return false;
    }

    /* method void detectShots(){

    } */
}
